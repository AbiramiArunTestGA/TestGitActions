<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<InstructionDefinition Author="Unknown Author" Name="1E-Exchange-TachyonCore-RenewCertificatesInStoreByIssuer" ReadablePayload="Renew local machine certificates in %folder% issued by %issuer%, and %requestNewKeys%." Description="Renews all certificates by a specified issuer in a local machine store folder and optionally requests new keys. This instruction makes use of a PowerShell script. Windows only.&#xD;&#xA;" InstructionType="Action" InstructionTtlMinutes="30" ResponseTtlMinutes="30" Version="4.2" xmlns="http://schemas.1e.com/Tachyon/InstructionDefinition/1.0">
  <Payload><![CDATA[@script = HttpGetFile(URL:"renewCertificatesByIssuer.ps1", Size:14143, Hash:"0EAC1710FA7F5A0E066C613356EC3302EAF54DE7BEAA0736363A26117B5E3F4D");
@result = Scripting.Run(IgnoreExitCode:true, Language: "PowerShell", ExecutionPolicy : "Override", Script : @script, InterpretAsJson : false, "-requestedStore", "%folder%", "-requestedIssuer", "%issuer%", "-newKey", "%requestNewKeys%" );

@result = SELECT * FROM @result WHERE Exitcode = 0 AND Output!="";
IF(@result)
    Utilities.TableFromJson(Json:@result.Output);
ELSE
    @result = SELECT * FROM @result WHERE Exitcode = 1;
    IF(@result)
        ERROR "Unable to retrieve certificates from the machine certificate store";
    ELSE
        @result = SELECT * FROM @result WHERE Output !="";
        IF(@result)
            ERROR "Unable to renew certificate successfully";  
        ELSE
            ERROR "No Certificate from the issuer %issuer% in certificate store found";
        ENDIF;
    ENDIF;
ENDIF;
]]></Payload>
  <SchemaJson><![CDATA[[
  {
    "Name": "PreviousSerialNumber",
    "Type": "String",
    "Length": 128
  },
  {
    "Name": "Format",
    "Type": "String",
    "Length": 16
  },
  {
    "Name": "Subject",
    "Type": "String",
    "Length": 256
  },
  {
    "Name": "Issuer",
    "Type": "String",
    "Length": 256
  },
  {
    "Name": "Thumbprint",
    "Type": "String",
    "Length": 128
  },
  {
    "Name": "FriendlyName",
    "Type": "String",
    "Length": 256
  },
  {
    "Name": "EffectiveDate",
    "Type": "String",
    "Length": 256
  },
  {
    "Name": "ExpirationDate",
    "Type": "String",
    "Length": 256
  },
  {
    "Name": "SerialNumber",
    "Type": "String",
    "Length": 128
  },
  {
    "Name": "SignatureAlgorithm",
    "Type": "String",
    "Length": 64
  },
  {
    "Name": "HasPrivateKey",
    "Type": "String",
    "Length": 16
  }
]]]></SchemaJson>
  <ParameterJson><![CDATA[[
  {
    "Name": "folder",
    "Pattern": "%folder%",
    "DataType": "string",
    "ControlType": "valuePicker",
    "Placeholder": "select certificate folder",
    "Validation": {
      "MaxLength": null,
      "AllowedValues": [
        "Other People (AddressBook)",
        "Third-Party Certification Authorities (AuthRoot)",
        "Intermediate Certification Authorities (CertificateAuthority)",
        "Revoked Certificates (Disallowed)",
        "Personal (My)",
        "Trusted Root Certification Authorities (Root)",
        "Trusted People (TrustedPeople)",
        "Trusted Publishers (TrustedPublisher)"
      ]
    }
  },
  {
    "Name": "issuer",
    "Pattern": "%issuer%",
    "DataType": "string",
    "ControlType": "freeText",
    "Placeholder": "issuer",
    "Validation": {
      "MaxLength": "64",
      "AllowedValues": null
    }
  },
  {
    "Name": "requestNewKeys",
    "Pattern": "%requestNewKeys%",
    "DataType": "string",
    "ControlType": "valuePicker",
    "Placeholder": "request a new key?",
    "Validation": {
      "MaxLength": null,
      "AllowedValues": [
        "request a new key",
        "keep the current key"
      ]
    }
  }
]]]></ParameterJson>
  <Resources>
    <Resource Name="renewCertificatesByIssuer">
      <Content Type="PowerShell" FileName="renewCertificatesByIssuer.ps1" Size="14143" Platform="Windows" Hash="0EAC1710FA7F5A0E066C613356EC3302EAF54DE7BEAA0736363A26117B5E3F4D"><![CDATA[]]></Content>
    </Resource>
  </Resources>
<Signature xmlns="http://www.w3.org/2000/09/xmldsig#"><SignedInfo><CanonicalizationMethod Algorithm="http://www.w3.org/TR/2001/REC-xml-c14n-20010315" /><SignatureMethod Algorithm="http://www.w3.org/2000/09/xmldsig#rsa-sha1" /><Reference URI=""><Transforms><Transform Algorithm="http://www.w3.org/2000/09/xmldsig#enveloped-signature" /></Transforms><DigestMethod Algorithm="http://www.w3.org/2000/09/xmldsig#sha1" /><DigestValue>z6Xw6DGDeC/omOmVPSc+iM3hTyQ=</DigestValue></Reference></SignedInfo><SignatureValue>oDBCjyhXek1LhH35Pza7BMcFuP+pfAGYzj7Qt5Tphb3u+SEJQaA56pQt6QE/BQ+T/26smIxEMNdV54S+Vad3PtFHtH9e4aO4f2Tn0sLTUkgcEVW35lk1u1wgwM2USOAgGUwr9oyPZQrVXlgaLiPVY45mGw0LrVJ5Fr4jaJqqOEVR2VL7/0UxbirQB8lTyxD7qfy6dHcZEzJWFWa2e0uSPg4Z3g/WpOE9Nekob78BUZrcJZ6MUMXviJFdoCsbI3FS9O27Wpt2rFgj6wiVcey8fnORUPLCrc2bhPNqxrHnxwBMXZ7NY4+r0Zw0hy7zn8Eyt1uTg484vF6Pex45H280Wg==</SignatureValue><KeyInfo><X509Data><X509Certificate>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</X509Certificate></X509Data></KeyInfo></Signature></InstructionDefinition>